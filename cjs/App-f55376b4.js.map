{"version":3,"file":"App-f55376b4.js","sources":["../src/app/core/redux/history.js","../src/app/core/util/pickProject.js","../src/app/core/schema.js","../src/app/core/search/expressions.js","../src/app/core/redux/sagas/queries.js","../src/app/core/redux/sagas/routing.js","../src/app/core/redux/sagas/navigation.js","../src/app/core/redux/sagas/index.js","../src/app/App.js"],"sourcesContent":["import { createBrowserHistory, createMemoryHistory } from 'history';\r\n\r\n// Create a history depending on the environment\r\nconst selectedHistory =\r\n  typeof window !== 'undefined' ? createBrowserHistory : createMemoryHistory;\r\n\r\nexport const history = (options = {}) => selectedHistory(options);\r\nexport const browserHistory = selectedHistory();\r\n","const servers = SERVERS; /* global SERVERS */\r\nconst alias = servers.alias.toLowerCase();\r\nconst publicUri = PUBLIC_URI; /* global PUBLIC_URI */\r\nconst projects = PROJECTS; /* global PROJECTS */\r\n\r\n// return a projectId via the request hostname\r\nconst pickProject = (hostname, query) => {\r\n  // if localhost we can only infer via a querystring, and take your word for it\r\n  if (hostname == 'localhost') {\r\n    return (query && query.p) || projects[0].id;\r\n  }\r\n\r\n  // if hostname is the actual public uri we can return the first project from the list\r\n  if (hostname == publicUri) {\r\n    return projects[0].id;\r\n  }\r\n\r\n  let project = 'unknown';\r\n\r\n  // // go through all the defined projects\r\n  // Object.entries(projects).map(([, p]) => {\r\n  const p = projects[0];\r\n\r\n  // check if we're accessing via the project's public uri\r\n  if (hostname.includes(p.publicUri)) project = p.id;\r\n\r\n  // the url structure is different for website (we don't prefix)\r\n  if (p.id.startsWith('website')) {\r\n    // check for internal and external hostnames\r\n    // we check live and preview distinctly so our rule does not clash with\r\n    // hostnames that use a project prefix\r\n    if (\r\n      hostname.includes(`live-${alias}.cloud.contensis.com`) ||\r\n      hostname.includes(`live.${alias}.contensis.cloud`) ||\r\n      hostname.includes(`preview-${alias}.cloud.contensis.com`) ||\r\n      hostname.includes(`preview.${alias}.contensis.cloud`)\r\n    )\r\n      project = p.id;\r\n  } else {\r\n    // check for internal and external hostnames, prefixed with the projectId\r\n    if (\r\n      hostname.includes(`${p.id.toLowerCase()}-${alias}.cloud.contensis.com`) ||\r\n      hostname.includes(`${p.id.toLowerCase()}.${alias}.contensis.cloud`)\r\n    )\r\n      project = p.id;\r\n  }\r\n  // });\r\n  return project === 'unknown' ? p.id : project;\r\n};\r\n\r\nexport default pickProject;\r\n","export const DataFormats = {\r\n  entry: 'entry',\r\n  webpage: 'webpage',\r\n};\r\n\r\nconst sys = {\r\n  contentTypeId: 'sys.contentTypeId',\r\n  dataFormat: 'sys.dataFormat',\r\n  filename: 'sys.properties.filename',\r\n  id: 'sys.id',\r\n  includeInSearch: 'sys.metadata.includeInSearch',\r\n  slug: 'sys.slug',\r\n  uri: 'sys.uri',\r\n  versionStatus: 'sys.versionStatus',\r\n};\r\n\r\nexport const Fields = {\r\n  entryTitle: 'entryTitle',\r\n  entryDescription: 'entryDescription',\r\n  keywords: 'keywords',\r\n  sys,\r\n  contentTypeId: 'sys.contentTypeId',\r\n  wildcard: '*',\r\n};\r\n\r\nexport const Projects = {\r\n  website: 'website',\r\n};\r\n\r\nexport const VersionStatus = {\r\n  published: 'published',\r\n  latest: 'latest',\r\n};\r\n\r\nexport const ContentTypes = {\r\n  contentPage: 'contentPage',\r\n};\r\n\r\nexport const WebpageFormats = {};\r\n\r\nexport const FilterExpressionTypes = {\r\n  contentType: 'contentType',\r\n  field: 'field',\r\n};\r\n","import { Op, OrderBy } from 'contensis-delivery-api';\r\nimport { Fields, DataFormats } from '~/core/schema';\r\nimport {\r\n  fixFreeTextForElastic,\r\n  extractQuotedPhrases,\r\n} from '~/core/search/util';\r\n\r\nexport const fieldExpression = (\r\n  field,\r\n  value,\r\n  operator = 'equalTo',\r\n  weight = null\r\n) => {\r\n  if (!field || !value) return [];\r\n  if (Array.isArray(value)) return equalToOrIn(field, value, operator);\r\n  else\r\n    return !weight\r\n      ? [Op[operator](field, value)]\r\n      : [Op[operator](field, value).weight(weight)];\r\n};\r\n\r\nexport const contentTypeIdExpression = (contentTypeIds, webpageTemplates) => {\r\n  const expressions = [];\r\n  if (!contentTypeIds && !webpageTemplates) return expressions;\r\n\r\n  if (contentTypeIds && contentTypeIds.length > 0) {\r\n    expressions.push(\r\n      ...dataFormatExpression(contentTypeIds, DataFormats.entry)\r\n    );\r\n  }\r\n\r\n  if (webpageTemplates && webpageTemplates.length > 0) {\r\n    expressions.push(\r\n      ...dataFormatExpression(webpageTemplates, DataFormats.webpage)\r\n    );\r\n  }\r\n\r\n  if (expressions.length > 1) return [Op.or(...expressions)];\r\n\r\n  return expressions;\r\n};\r\n\r\nexport const filterExpressions = filters => {\r\n  if (!filters) return [];\r\n  const expressions = [];\r\n\r\n  filters.map(param => {\r\n    expressions.push(...fieldExpression(param.key, param.value, 'contains'));\r\n  });\r\n\r\n  return expressions;\r\n};\r\n\r\nexport const dataFormatExpression = (\r\n  contentTypeIds,\r\n  dataFormat = DataFormats.entry\r\n) => {\r\n  if (contentTypeIds && contentTypeIds.length > 0) {\r\n    /**\r\n     * We have an array of contentTypeIds some may be prefixed with a \"!\"\r\n     * to indicate this is a \"not\" expression\r\n     */\r\n    const withContentTypeIds = contentTypeIds.filter(c => !c.startsWith('!'));\r\n    const notContentTypeIds = contentTypeIds\r\n      .filter(c => c.startsWith('!'))\r\n      .map(id => id.substring(1));\r\n\r\n    const andExpr = Op.and();\r\n\r\n    const dataFormatExpr = fieldExpression(Fields.sys.dataFormat, dataFormat);\r\n\r\n    const withExpr = fieldExpression(\r\n      Fields.sys.contentTypeId,\r\n      withContentTypeIds\r\n    );\r\n\r\n    const notExpr = [\r\n      Op.not(...fieldExpression(Fields.sys.contentTypeId, notContentTypeIds)),\r\n    ];\r\n\r\n    andExpr.add(...dataFormatExpr);\r\n    if (withContentTypeIds.length > 0) andExpr.add(...withExpr);\r\n    if (notContentTypeIds.length > 0) andExpr.add(...notExpr);\r\n\r\n    return [andExpr];\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const defaultExpressions = versionStatus => {\r\n  return [Op.equalTo(Fields.sys.versionStatus, versionStatus)];\r\n};\r\n\r\nexport const defaultSearchExpressions = versionStatus => {\r\n  return [\r\n    ...defaultExpressions(versionStatus),\r\n    ...includeInSearchExpressions(),\r\n  ];\r\n};\r\nexport const includeInSearchExpressions = () => [\r\n  Op.or(\r\n    Op.and(\r\n      Op.exists(Fields.sys.includeInSearch, true),\r\n      Op.equalTo(Fields.sys.includeInSearch, true)\r\n    ),\r\n    Op.exists(Fields.sys.includeInSearch, false)\r\n  ),\r\n];\r\n\r\nexport const orderByExpression = orderBy => {\r\n  let expression = OrderBy;\r\n  if (orderBy && orderBy.length > 0) {\r\n    orderBy.map(\r\n      ob =>\r\n        (expression = ob.startsWith('-')\r\n          ? expression.desc(ob.substring(1))\r\n          : expression.asc(ob))\r\n    );\r\n  }\r\n  return expression;\r\n};\r\n\r\nconst equalToOrIn = (field, arr, operator = 'equalTo') =>\r\n  arr.length === 0\r\n    ? []\r\n    : arr.length === 1\r\n    ? [Op[operator](field, arr[0])]\r\n    : [Op.in(field, ...arr)];\r\n\r\nexport const customWhereExpressions = where => {\r\n  if (!where || !Array.isArray(where)) return [];\r\n\r\n  // Accept HTTP style objects and map them to\r\n  // their equivalent JS client \"Op\" expressions\r\n  return where.map(clause => {\r\n    let expression;\r\n    Object.keys(clause).map((key, idx) => {\r\n      if (idx === 1) {\r\n        const operator = key;\r\n        const value = clause[key];\r\n        expression = Op[operator](clause.field, value, clause.weight);\r\n      }\r\n    });\r\n    return expression;\r\n  });\r\n};\r\n\r\nexport const termExpressions = (searchTerm, weightedSearchFields) => {\r\n  if (searchTerm && weightedSearchFields && weightedSearchFields.length > 0) {\r\n    // Extract any phrases in quotes to array\r\n    const quotedPhrases = extractQuotedPhrases(searchTerm);\r\n\r\n    // Modify the search term to remove any quoted phrases to leave any remaining terms\r\n    let modifiedSearchTerm = searchTerm;\r\n    quotedPhrases.forEach(\r\n      qp =>\r\n        (modifiedSearchTerm = modifiedSearchTerm\r\n          .replace(qp, '')\r\n          .replace('\"\"', '')\r\n          .trim())\r\n    );\r\n\r\n    // Push to the operators array to include in the query\r\n    const operators = [];\r\n\r\n    // Helper functions to generate Op expressions\r\n    const containsOp = (f, term) =>\r\n      fieldExpression(\r\n        f.fieldId,\r\n        fixFreeTextForElastic(term),\r\n        'contains',\r\n        f.weight\r\n      );\r\n    const freeTextOp = (f, term) =>\r\n      fieldExpression(\r\n        f.fieldId,\r\n        fixFreeTextForElastic(term),\r\n        'freeText',\r\n        f.weight\r\n      );\r\n\r\n    // For each weighted search field\r\n    weightedSearchFields.forEach(f => {\r\n      // Push to field operators\r\n      const fieldOperators = [];\r\n\r\n      // Add operator expressions for modified search term\r\n      if (modifiedSearchTerm) {\r\n        if (\r\n          [Fields.keywords, Fields.sys.filename, Fields.sys.uri].includes(\r\n            f.fieldId\r\n          )\r\n        ) {\r\n          fieldOperators.push(...containsOp(f, modifiedSearchTerm));\r\n        } else {\r\n          if ([Fields.entryTitle].includes(f.fieldId)) {\r\n            fieldOperators.push(\r\n              Op.or(\r\n                ...containsOp(f, modifiedSearchTerm),\r\n                ...freeTextOp(f, modifiedSearchTerm)\r\n              )\r\n            );\r\n          } else {\r\n            fieldOperators.push(...freeTextOp(f, modifiedSearchTerm));\r\n          }\r\n        }\r\n      }\r\n\r\n      // Add operator expressions for any quoted phrases\r\n      quotedPhrases.forEach(qp => fieldOperators.push(...containsOp(f, qp)));\r\n\r\n      // If we are using multiple operators for a field we will\r\n      // wrap each field inside an And operator so we will match\r\n      // all terms/phrases rather than any terms/phrases\r\n      if (fieldOperators.length > 1) {\r\n        operators.push(Op.and(...fieldOperators));\r\n      } else {\r\n        operators.push(...fieldOperators);\r\n      }\r\n    });\r\n\r\n    // Wrap operators in an Or operator\r\n    return [Op.or().addRange(operators)];\r\n  } else if (searchTerm) {\r\n    return [Op.contains(Fields.wildcard, searchTerm)];\r\n  } else {\r\n    return [];\r\n  }\r\n};\r\n","// eslint-disable-next-line import/named\r\nimport { Query } from '~/core/util/ContensisDeliveryApi';\r\nimport { fieldExpression, defaultExpressions } from '~/core/search/expressions';\r\n\r\nexport const routeEntryByFieldsQuery = (\r\n  id,\r\n  language = 'en-GB',\r\n  fields = [],\r\n  versionStatus = 'published'\r\n) => {\r\n  const query = new Query(\r\n    ...[\r\n      ...fieldExpression('sys.id', id),\r\n      ...fieldExpression('sys.language', language),\r\n      ...defaultExpressions(versionStatus),\r\n    ]\r\n  );\r\n  query.fields = fields;\r\n  return query;\r\n};\r\n","// load-entries.js\r\nimport * as log from 'loglevel';\r\nimport { takeEvery, put, select, call, all } from 'redux-saga/effects';\r\nimport {\r\n  SET_ENTRY,\r\n  SET_ANCESTORS,\r\n  SET_NAVIGATION_PATH,\r\n  SET_ROUTE,\r\n  CALL_HISTORY_METHOD,\r\n  SET_SIBLINGS,\r\n  UPDATE_LOADING_STATE,\r\n} from '~/core/redux/types/routing';\r\nimport { cachedSearch, deliveryApi } from '~/core/util/ContensisDeliveryApi';\r\nimport { selectVersionStatus } from '~/core/redux/selectors/version';\r\nimport {\r\n  // selectCurrentNode,\r\n  // selectCurrentPath,\r\n  selectCurrentProject,\r\n  selectRouteEntry,\r\n} from '~/core/redux/selectors/routing';\r\nimport { GET_NODE_TREE } from '../types/navigation';\r\nimport { hasNavigationTree } from '../selectors/navigation';\r\nimport { routeEntryByFieldsQuery } from './queries';\r\nimport { findContentTypeMapping } from '~/core/util/helpers';\r\n\r\nexport const routingSagas = [\r\n  takeEvery(SET_NAVIGATION_PATH, getRouteSaga),\r\n  takeEvery(SET_ROUTE, setRouteSaga),\r\n];\r\n\r\n/**\r\n * To navigate / push a specific route via redux middleware\r\n * @param {path, state} action\r\n */\r\nfunction* setRouteSaga(action) {\r\n  yield put({\r\n    type: CALL_HISTORY_METHOD,\r\n    payload: {\r\n      method: 'push',\r\n      args: [action.path, action.state],\r\n    },\r\n  });\r\n}\r\n\r\nfunction* getRouteSaga(action) {\r\n  let entry = null;\r\n  try {\r\n    const {\r\n      withEvents,\r\n      routes: { ContentTypeMappings = {} } = {},\r\n      staticRoute,\r\n    } = action;\r\n    let appsays;\r\n    if (withEvents && withEvents.onRouteLoad) {\r\n      appsays = yield withEvents.onRouteLoad(action);\r\n    }\r\n    // if appsays customNavigation: true, we will set doNavigation to false\r\n    // if appsays customNavigation: { ... }, we will set doNavigation to the customNavigation object and check for child elements\r\n    // if appsays nothing we will set doNavigation to true and continue to do navigation calls\r\n    const doNavigation =\r\n      !appsays ||\r\n      (appsays && appsays.customNavigation === true\r\n        ? false\r\n        : (appsays && appsays.customNavigation) || true);\r\n\r\n    const entryLinkDepth = (appsays && appsays.entryLinkDepth) || 3;\r\n    const setContentTypeLimits = !!ContentTypeMappings.find(\r\n      ct => ct.fields || ct.linkDepth || ct.nodeOptions\r\n    );\r\n\r\n    const state = yield select();\r\n    const routeEntry = selectRouteEntry(state);\r\n    // const routeNode = selectCurrentNode(state);\r\n    const currentPath = action.path; //selectCurrentPath(state);\r\n    const deliveryApiStatus = selectVersionStatus(state);\r\n    const project = selectCurrentProject(state);\r\n    const isHome = currentPath === '/';\r\n    const isPreview = currentPath && currentPath.startsWith('/preview/');\r\n    const defaultLang = (appsays && appsays.defaultLang) || 'en-GB';\r\n\r\n    if (\r\n      !isPreview &&\r\n      ((appsays && appsays.customRouting) ||\r\n        (staticRoute && !staticRoute.route.fetchNode) ||\r\n        (routeEntry && action.statePath === action.path))\r\n    ) {\r\n      // To prevent erroneous 404s and wasted network calls, this covers\r\n      // - appsays customRouting and does SET_ENTRY etc. via the consuming app\r\n      // - all staticRoutes (where custom 'route.fetchNode' attribute is falsey)\r\n      // - standard Contensis SiteView Routing where we already have that entry in state\r\n      if (\r\n        routeEntry &&\r\n        (!staticRoute || (staticRoute.route && staticRoute.route.fetchNode))\r\n      ) {\r\n        entry = routeEntry.toJS();\r\n        //Do nothing, the entry is allready the right one.\r\n        // yield put({\r\n        //   type: SET_ENTRY,\r\n        //   entry,\r\n        //   node: routeNode,\r\n        //   isLoading: false,\r\n        // });\r\n        yield put({\r\n          type: UPDATE_LOADING_STATE,\r\n          isLoading: false,\r\n        });\r\n      } else yield call(setRouteEntry);\r\n    } else {\r\n      let pathNode = null,\r\n        ancestors = null,\r\n        siblings = null;\r\n\r\n      // Handle homepage\r\n      if (isHome) {\r\n        pathNode = yield cachedSearch.getRootNode(\r\n          {\r\n            depth: 0,\r\n            entryFields: '*',\r\n            entryLinkDepth,\r\n            language: defaultLang,\r\n            versionStatus: deliveryApiStatus,\r\n          },\r\n          project\r\n        );\r\n      } else {\r\n        // Handle preview routes\r\n        if (isPreview) {\r\n          let splitPath = currentPath.split('/');\r\n          let entryGuid = splitPath[2];\r\n          let language = defaultLang;\r\n          if (splitPath.length >= 3) {\r\n            //set lang key if available in the path, else use default lang\r\n            //assumes preview url on content type is: http://preview.ALIAS.contensis.cloud/preview/{GUID}/{LANG}\r\n            if (splitPath.length == 4) language = splitPath[3];\r\n            // According to product dev we cannot use Node API\r\n            // for previewing entries as it gives a response of []\r\n            // -- apparently it is not correct to request latest content\r\n            // with Node API\r\n\r\n            let previewEntry = yield deliveryApi\r\n              .getClient(deliveryApiStatus, project)\r\n              .entries.get({\r\n                id: entryGuid,\r\n                language,\r\n                linkDepth: entryLinkDepth,\r\n              });\r\n            if (previewEntry) {\r\n              pathNode = { entry: previewEntry };\r\n\r\n              // yield call(setRouteEntry, previewEntry);\r\n              // } else {\r\n              // yield call(do404);\r\n            }\r\n          }\r\n        } else {\r\n          // Handle all other routes\r\n          const childrenDepth =\r\n            doNavigation === true || doNavigation.children === true\r\n              ? 1\r\n              : (doNavigation && doNavigation.children) || 0;\r\n          pathNode = yield cachedSearch.getNode(\r\n            {\r\n              depth: childrenDepth,\r\n              path: currentPath,\r\n              entryFields: setContentTypeLimits\r\n                ? ['sys.contentTypeId', 'sys.id']\r\n                : '*',\r\n              entryLinkDepth: setContentTypeLimits ? 0 : entryLinkDepth,\r\n              versionStatus: deliveryApiStatus,\r\n            },\r\n            project\r\n          );\r\n          if (\r\n            setContentTypeLimits &&\r\n            pathNode &&\r\n            pathNode.entry &&\r\n            pathNode.entry.sys &&\r\n            pathNode.entry.sys.id\r\n          ) {\r\n            // Get fields[] and linkDepth from ContentTypeMapping to get the entry data\r\n            // at a specified depth with specified fields\r\n            const { fields, linkDepth, nodeOptions = {} } =\r\n              findContentTypeMapping(\r\n                ContentTypeMappings,\r\n                pathNode.entry.sys.contentTypeId\r\n              ) || {};\r\n            const query = routeEntryByFieldsQuery(\r\n              pathNode.entry.sys.id,\r\n              pathNode.entry.sys.language,\r\n              fields,\r\n              deliveryApiStatus\r\n            );\r\n            const payload = yield cachedSearch.search(\r\n              query,\r\n              linkDepth || entryLinkDepth || 0,\r\n              project\r\n            );\r\n            if (payload && payload.items && payload.items.length > 0) {\r\n              pathNode.entry = entry = payload.items[0];\r\n            }\r\n\r\n            if (childrenDepth > 0 || nodeOptions.children) {\r\n              const childrenOptions = nodeOptions.children || {};\r\n              // We need to make a separate call for child nodes if the first node query has been\r\n              // limited by linkDepth or fields[]\r\n              const childNodes = yield cachedSearch.getChildren({\r\n                id: pathNode.id,\r\n                entryFields: childrenOptions.fields || fields || '*',\r\n                entryLinkDepth:\r\n                  childrenOptions.linkDepth || linkDepth || entryLinkDepth || 0,\r\n                versionStatus: deliveryApiStatus,\r\n              });\r\n              if (childNodes) {\r\n                pathNode.children = childNodes;\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        if (pathNode && pathNode.id) {\r\n          if (doNavigation === true || doNavigation.ancestors) {\r\n            try {\r\n              ancestors = yield cachedSearch.getAncestors(\r\n                {\r\n                  id: pathNode.id,\r\n                  versionStatus: deliveryApiStatus,\r\n                },\r\n                project\r\n              );\r\n            } catch (ex) {\r\n              log.info('Problem fetching ancestors', ex);\r\n            }\r\n          }\r\n\r\n          if (doNavigation === true || doNavigation.siblings) {\r\n            try {\r\n              siblings = yield cachedSearch.getSiblings(\r\n                {\r\n                  id: pathNode.id,\r\n                  versionStatus: deliveryApiStatus,\r\n                },\r\n                project\r\n              );\r\n            } catch (ex) {\r\n              log.info('Problem fetching siblings', ex);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (\r\n        pathNode &&\r\n        pathNode.entry &&\r\n        pathNode.entry.sys &&\r\n        pathNode.entry.sys.id\r\n      ) {\r\n        entry = pathNode.entry;\r\n        const { entryMapper } =\r\n          ContentTypeMappings.find(\r\n            ct => ct.contentTypeID === entry.sys.contentTypeId\r\n          ) || {};\r\n        yield call(\r\n          setRouteEntry,\r\n          entry,\r\n          pathNode,\r\n          ancestors,\r\n          siblings,\r\n          entryMapper\r\n        );\r\n      } else {\r\n        if (pathNode)\r\n          yield call(setRouteEntry, null, pathNode, ancestors, siblings);\r\n        else yield call(do404);\r\n      }\r\n      if (!appsays || !appsays.preventScrollTop) {\r\n        // Scroll into View\r\n        if (typeof window !== 'undefined') {\r\n          window.scroll({\r\n            top: 0,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    if (withEvents && withEvents.onRouteLoaded) {\r\n      yield withEvents.onRouteLoaded({ ...action, entry });\r\n    }\r\n\r\n    if (\r\n      !hasNavigationTree(state) &&\r\n      (doNavigation === true || doNavigation.tree)\r\n    )\r\n      // Load navigation clientside only, a put() should help that work\r\n      yield put({\r\n        type: GET_NODE_TREE,\r\n        treeDepth:\r\n          doNavigation === true ||\r\n          !doNavigation.tree ||\r\n          doNavigation.tree === true\r\n            ? 0\r\n            : doNavigation.tree,\r\n      });\r\n  } catch (e) {\r\n    log.error(...['Error running route saga:', e, e.stack]);\r\n    yield call(do500, e);\r\n  }\r\n}\r\n\r\nfunction* setRouteEntry(\r\n  entry,\r\n  node,\r\n  ancestors,\r\n  siblings,\r\n  entryMapper,\r\n  notFound = false\r\n) {\r\n  const mappedEntry = yield mapRouteEntry(entryMapper, {\r\n    ...node,\r\n    entry,\r\n    ancestors,\r\n    siblings,\r\n  });\r\n\r\n  yield all([\r\n    put({\r\n      type: SET_ENTRY,\r\n      id: (entry && entry.sys.id) || null,\r\n      entry,\r\n      mappedEntry,\r\n      node,\r\n      notFound,\r\n    }),\r\n    ancestors &&\r\n      put({\r\n        type: SET_ANCESTORS,\r\n        ancestors,\r\n      }),\r\n    siblings &&\r\n      put({\r\n        type: SET_SIBLINGS,\r\n        siblings,\r\n      }),\r\n  ]);\r\n}\r\n\r\nfunction* mapRouteEntry(entryMapper, node) {\r\n  try {\r\n    if (typeof entryMapper === 'function') {\r\n      const state = yield select();\r\n      const mappedEntry = yield call(entryMapper, node, state);\r\n      return mappedEntry;\r\n    }\r\n  } catch (e) {\r\n    log.error(...['Error running entryMapper:', e, e.stack]);\r\n  }\r\n  return;\r\n}\r\n\r\nfunction* do404() {\r\n  yield put({\r\n    type: SET_ENTRY,\r\n    id: null,\r\n    entry: null,\r\n    notFound: true,\r\n  });\r\n}\r\n\r\nfunction* do500(error) {\r\n  yield put({\r\n    type: SET_ENTRY,\r\n    id: null,\r\n    entry: null,\r\n    notFound: true,\r\n    isError: true,\r\n    error,\r\n    statusCode: error && error.status ? error.status : 500,\r\n  });\r\n}\r\n","import { takeEvery, put, select } from 'redux-saga/effects';\r\n\r\nimport { deliveryApi } from '~/core/util/ContensisDeliveryApi';\r\nimport {\r\n  GET_NODE_TREE,\r\n  SET_NODE_TREE,\r\n  GET_NODE_TREE_ERROR,\r\n} from '~/core/redux/types/navigation';\r\nimport { hasNavigationTree } from '~/core/redux/selectors/navigation';\r\nimport { selectVersionStatus } from '../selectors/version';\r\nimport { selectCurrentProject } from '../selectors/routing';\r\n\r\nexport const navigationSagas = [takeEvery(GET_NODE_TREE, ensureNodeTreeSaga)];\r\n\r\nexport function* ensureNodeTreeSaga(action) {\r\n  const state = yield select();\r\n  try {\r\n    if (!hasNavigationTree(state)) {\r\n      const deliveryApiVersionStatus = yield select(selectVersionStatus);\r\n      const project = yield select(selectCurrentProject);\r\n      const nodes = yield deliveryApi\r\n        .getClient(deliveryApiVersionStatus, project)\r\n        .nodes.getRoot({\r\n          depth: action.treeDepth || 0,\r\n        });\r\n      if (nodes) {\r\n        yield put({ type: SET_NODE_TREE, nodes });\r\n      } else {\r\n        yield put({ type: GET_NODE_TREE_ERROR });\r\n      }\r\n    }\r\n  } catch (ex) {\r\n    yield put({ type: GET_NODE_TREE_ERROR, error: ex.toString() });\r\n  }\r\n}\r\n","// index.js\r\nimport { all } from 'redux-saga/effects';\r\nimport { routingSagas } from './routing';\r\nimport { sagas as userSagas } from '~/features/login';\r\nimport { navigationSagas } from './navigation';\r\nimport { validateUserSaga } from '~/features/login/redux/sagas';\r\n\r\nexport default function(featureSagas = []) {\r\n  return function* rootSaga() {\r\n    const subSagas = [...routingSagas, ...navigationSagas, ...userSagas];\r\n    yield all([validateUserSaga({}), ...subSagas, ...featureSagas]);\r\n  };\r\n}\r\n","import React from 'react';\r\nimport { hot } from 'react-hot-loader';\r\nimport RouteLoader from '~/core/routes/RouteLoader';\r\n\r\nconst AppRoot = props => {\r\n  return <RouteLoader {...props} />;\r\n};\r\n\r\nexport default hot(module)(AppRoot);\r\n"],"names":["selectedHistory","window","createBrowserHistory","createMemoryHistory","history","options","browserHistory","servers","SERVERS","alias","toLowerCase","publicUri","PUBLIC_URI","projects","PROJECTS","pickProject","hostname","query","p","id","project","includes","startsWith","sys","contentTypeId","dataFormat","filename","includeInSearch","slug","uri","versionStatus","Fields","entryTitle","entryDescription","keywords","wildcard","fieldExpression","field","value","operator","weight","Array","isArray","equalToOrIn","Op","defaultExpressions","equalTo","arr","length","in","routeEntryByFieldsQuery","language","fields","Query","routingSagas","takeEvery","SET_NAVIGATION_PATH","getRouteSaga","SET_ROUTE","setRouteSaga","action","put","type","CALL_HISTORY_METHOD","payload","method","args","path","state","entry","withEvents","routes","ContentTypeMappings","staticRoute","appsays","onRouteLoad","doNavigation","customNavigation","entryLinkDepth","setContentTypeLimits","find","ct","linkDepth","nodeOptions","select","routeEntry","selectRouteEntry","currentPath","deliveryApiStatus","selectVersionStatus","selectCurrentProject","isHome","isPreview","defaultLang","customRouting","route","fetchNode","statePath","toJS","UPDATE_LOADING_STATE","isLoading","call","setRouteEntry","pathNode","ancestors","siblings","cachedSearch","getRootNode","depth","entryFields","splitPath","split","entryGuid","previewEntry","deliveryApi","getClient","entries","get","childrenDepth","children","getNode","findContentTypeMapping","search","items","childrenOptions","childNodes","getChildren","getAncestors","ex","log","getSiblings","entryMapper","contentTypeID","do404","preventScrollTop","scroll","top","onRouteLoaded","hasNavigationTree","tree","GET_NODE_TREE","treeDepth","e","stack","do500","node","notFound","mappedEntry","mapRouteEntry","all","SET_ENTRY","SET_ANCESTORS","SET_SIBLINGS","error","isError","statusCode","status","navigationSagas","ensureNodeTreeSaga","deliveryApiVersionStatus","nodes","getRoot","SET_NODE_TREE","GET_NODE_TREE_ERROR","toString","featureSagas","rootSaga","subSagas","userSagas","validateUserSaga","AppRoot","props","React","RouteLoader"],"mappings":"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"}