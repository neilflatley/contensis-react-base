{"version":3,"file":"sagas-6cbd425c.js","sources":["../src/app/features/login/redux/types.js","../src/app/features/login/redux/reducers.js","../src/app/features/login/util/CookieHelper.class.js","../src/app/features/login/util/SecurityApi.class.js","../src/app/features/login/util/LoginHelper.class.js","../src/app/features/login/redux/sagas.js"],"sourcesContent":["const ACTION_PREFIX = '@USER/';\r\nexport const UPDATE_USER = `${ACTION_PREFIX}UPDATE_USER`;\r\nexport const LOGIN_USER = `${ACTION_PREFIX}LOGIN_USER`;\r\nexport const LOGIN_SUCCESSFUL = `${ACTION_PREFIX}LOGIN_SUCCESSFUL`;\r\nexport const LOGIN_FAILED = `${ACTION_PREFIX}LOGIN_FAILED`;\r\nexport const LOGOUT_USER = `${ACTION_PREFIX}LOGOUT_USER`;\r\nexport const TOGGLE_LOGIN_MODE = `${ACTION_PREFIX}TOGGLE_LOGIN_MODE`;\r\nexport const CREATE_USER_ACCOUNT = `${ACTION_PREFIX}CREATE_USER_ACCOUNT`;\r\nexport const VALIDATE_USER = `${ACTION_PREFIX}VALIDATE_USER`;\r\nexport const VALIDATE_USER_SUCCESS = `${ACTION_PREFIX}VALIDATE_USER_SUCCESS`;\r\nexport const VALIDATE_USER_FAILED = `${ACTION_PREFIX}VALIDATE_USER_FAILED`;\r\nexport const FORGOT_USER_PASSWORD = `${ACTION_PREFIX}FORGOT_USER_PASSWORD`;\r\nexport const FORGOT_USER_PASSWORD_COMPLETE = `${ACTION_PREFIX}FORGOT_USER_PASSWORD_COMPLETE`;\r\nexport const CHANGE_USER_PASSWORD = `${ACTION_PREFIX}CHANGE_USER_PASSWORD`;\r\nexport const CHANGE_USER_PASSWORD_FAILED = `${ACTION_PREFIX}CHANGE_USER_PASSWORD_FAILED`;\r\nexport const CHANGE_USER_PASSWORD_COMPLETE = `${ACTION_PREFIX}CHANGE_USER_PASSWORD_COMPLETE`;\r\nexport const SET_RECAPTCHA_KEY = `${ACTION_PREFIX}SET_RECAPTCHA_KEY`;\r\nexport const SET_RECAPTCHA_RESPONSE = `${ACTION_PREFIX}SET_RECAPTCHA_RESPONSE`;\r\n","import { List, Map, fromJS } from 'immutable';\r\nimport {\r\n  UPDATE_USER,\r\n  TOGGLE_LOGIN_MODE,\r\n  SET_RECAPTCHA_KEY,\r\n  SET_RECAPTCHA_RESPONSE,\r\n} from './types';\r\n\r\nexport const initialUserState = Map({\r\n  loggedIn: false,\r\n  failedLogin: null,\r\n  username: null,\r\n  id: null,\r\n  securityToken: null,\r\n  logonResult: null,\r\n  groups: new List([]),\r\n  emailAddress: null,\r\n  fullName: null,\r\n  loginScreenMode: 'login',\r\n  passwordReset: false,\r\n  passwordResetMessage: null,\r\n  changePasswordMessage: null,\r\n  recaptcha: new Map({\r\n    key: null,\r\n    response: new Map({ isHuman: false, token: null }),\r\n  }),\r\n});\r\n\r\nexport default (state = initialUserState, action) => {\r\n  switch (action.type) {\r\n    case UPDATE_USER: {\r\n      const { user } = action;\r\n      return state\r\n        .set(\r\n          'loggedIn',\r\n          typeof user.loggedIn !== 'undefined'\r\n            ? user.loggedIn\r\n            : state.get('loggedIn')\r\n        )\r\n        .set(\r\n          'failedLogin',\r\n          typeof user.failedLogin !== 'undefined'\r\n            ? user.failedLogin\r\n            : state.get('failedLogin')\r\n        )\r\n        .set('username', user.username || state.get('username'))\r\n        .set('id', user.id || state.get('id'))\r\n        .set('securityToken', user.securityToken || state.get('securityToken'))\r\n        .set('logonResult', user.logonResult || state.get('logonResult'))\r\n        .set('groups', fromJS(user.groups) || state.get('groups'))\r\n        .set('emailAddress', user.emailAddress || state.get('emailAddress'))\r\n        .set('fullName', user.fullName || state.get('fullName'))\r\n        .set(\r\n          'passwordReset',\r\n          typeof user.passwordReset !== 'undefined'\r\n            ? user.passwordReset\r\n            : state.get('passwordReset')\r\n        )\r\n        .set(\r\n          'passwordResetMessage',\r\n          user.passwordResetMessage || state.get('passwordResetMessage')\r\n        )\r\n        .set(\r\n          'changePasswordMessage',\r\n          user.changePasswordMessage || state.get('changePasswordMessage')\r\n        );\r\n    }\r\n    case TOGGLE_LOGIN_MODE: {\r\n      const newMode = action.loginMode;\r\n      return state.set('loginScreenMode', newMode);\r\n    }\r\n    case SET_RECAPTCHA_KEY: {\r\n      return state.setIn(['recaptcha', 'key'], action.key);\r\n    }\r\n    case SET_RECAPTCHA_RESPONSE: {\r\n      return state\r\n        .setIn(['recaptcha', 'response', 'isHuman'], action.isHuman)\r\n        .setIn(['recaptcha', 'response', 'token'], action.token);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import Cookies from 'js-cookie';\r\n\r\nconst COOKIE_VALID_DAYS = 1; // 0 = Session cookie\r\n\r\n// Override the default js-cookie conversion / encoding\r\n// methods so the written values work with Contensis sites\r\nconst _cookie = Cookies.withConverter({\r\n  read: value => decodeURIComponent(value),\r\n  write: value => encodeURIComponent(value),\r\n});\r\n\r\nexport class CookieHelper {\r\n  static GetCookie(name) {\r\n    return _cookie.get(name);\r\n  }\r\n\r\n  static SetCookie(name, value, maxAgeDays = COOKIE_VALID_DAYS) {\r\n    maxAgeDays === 0\r\n      ? _cookie.set(name, value)\r\n      : _cookie.set(name, value, { expires: maxAgeDays });\r\n  }\r\n\r\n  static DeleteCookie(name) {\r\n    _cookie.remove(name);\r\n  }\r\n}\r\n","const CMS_URL = SERVERS.cms; /* global SERVERS */\r\n\r\nconst config = {\r\n  REGISTER_USER_URI: 'Security/RegisterUser',\r\n  LOGON_USER_URI: 'REST/Contensis/Security/AuthenticateApplication',\r\n  VALIDATE_USER_URI: 'REST/Contensis/Security/IsAuthenticated',\r\n  USER_INFO_URI: 'REST/Contensis/Security/GetUserInfo',\r\n  FORGOT_PASSWORD_URI: 'Security/ResetPasswordEmail',\r\n  CHANGE_PASSWORD_URI: 'Security/ChangePassword',\r\n  CHANGE_PASSWORD_TOKEN_URI: 'Security/ChangePasswordWithToken',\r\n  AUTH_CAPTCHA_URI: 'Security/AuthenticateCaptcha',\r\n  LOGIN_URL: '/business-government/partner',\r\n};\r\n\r\nconst REGISTER_USER_URL = `${CMS_URL}/${config.REGISTER_USER_URI}`;\r\nconst LOGON_USER_URL = `${CMS_URL}/${config.LOGON_USER_URI}`;\r\nconst VALIDATE_USER_URL = `${CMS_URL}/${config.VALIDATE_USER_URI}`;\r\nconst USER_INFO_URL = `${CMS_URL}/${config.USER_INFO_URI}`;\r\nconst FORGOT_PASSWORD_URI = `/${config.FORGOT_PASSWORD_URI}`;\r\nconst CHANGE_PASSWORD_URI = `/${config.CHANGE_PASSWORD_URI}`;\r\nconst AUTH_CAPTCHA_URI = `/${config.AUTH_CAPTCHA_URI}`;\r\nconst CHANGE_PASSWORD_TOKEN_URI = `/${config.CHANGE_PASSWORD_TOKEN_URI}`;\r\n\r\nconst BASE_OPTIONS = {\r\n  method: 'GET',\r\n  headers: { 'Content-Type': 'application/json' },\r\n};\r\n\r\nexport class SecurityApi {\r\n  static async AuthoriseRecaptcha(token) {\r\n    const url = `${AUTH_CAPTCHA_URI}?captchaToken=${encodeURIComponent(token)}`;\r\n    const options = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      method: 'POST',\r\n    };\r\n    return await SecurityApi.get(url, options);\r\n  }\r\n\r\n  static async LogonUser(username, password) {\r\n    const body = {\r\n      username,\r\n      password,\r\n      ip: '127.0.0.1',\r\n      applicationName: 'DesktopTool',\r\n    };\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n    };\r\n    return await SecurityApi.get(LOGON_USER_URL, options);\r\n  }\r\n\r\n  static async ValidateUser(securityToken) {\r\n    const url = `${VALIDATE_USER_URL}?token=${encodeURIComponent(\r\n      securityToken\r\n    )}`;\r\n    const bodyToken = encodeURIComponent(\r\n      decodeURIComponent(decodeURIComponent(securityToken))\r\n    );\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      method: 'POST',\r\n      body: JSON.stringify({ securityToken: bodyToken }),\r\n    };\r\n    return await SecurityApi.get(url, options);\r\n  }\r\n\r\n  static async GetUserInfo(securityToken) {\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      headers: {\r\n        ['Content-Type']: 'text/plain',\r\n        ContensisCMSUserName: securityToken,\r\n      },\r\n    };\r\n    return await SecurityApi.get(USER_INFO_URL, options);\r\n  }\r\n\r\n  static async RegisterUser(email, password) {\r\n    const body = { email, password };\r\n    const options = {\r\n      ...BASE_OPTIONS,\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n    };\r\n    return await SecurityApi.get(REGISTER_USER_URL, options);\r\n  }\r\n\r\n  static async ChangePassword(\r\n    username,\r\n    oldPassword,\r\n    newPassword,\r\n    newPasswordConfirm\r\n  ) {\r\n    const url = `${CHANGE_PASSWORD_URI}?username=${encodeURIComponent(\r\n      username\r\n    )}&oldPassword=${encodeURIComponent(\r\n      oldPassword\r\n    )}&newPassword=${encodeURIComponent(\r\n      newPassword\r\n    )}&newPasswordConfirm=${encodeURIComponent(newPasswordConfirm)}`;\r\n    const options = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      method: 'POST',\r\n    };\r\n    return await SecurityApi.get(url, options);\r\n  }\r\n\r\n  static async ChangePasswordWithToken(token, newPassword, newPasswordConfirm) {\r\n    const url = `${CHANGE_PASSWORD_TOKEN_URI}?token=${token}&newPassword=${encodeURIComponent(\r\n      newPassword\r\n    )}&confirmPassword=${encodeURIComponent(newPasswordConfirm)}`;\r\n    const options = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      method: 'POST',\r\n    };\r\n    return await SecurityApi.get(url, options);\r\n  }\r\n\r\n  static async ForgotPassword(username, currentUrl) {\r\n    const url = `${FORGOT_PASSWORD_URI}?username=${encodeURIComponent(\r\n      username\r\n    )}&currentUrl=${encodeURIComponent(currentUrl)}`;\r\n    const options = {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      method: 'POST',\r\n    };\r\n    return await SecurityApi.get(url, options);\r\n  }\r\n\r\n  static async get(url, options = BASE_OPTIONS) {\r\n    try {\r\n      const responseBody = await api(url, options);\r\n      if (responseBody) return responseBody;\r\n      return false;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nasync function api(url, options) {\r\n  return fetch(url, options)\r\n    .then(async response => {\r\n      setTimeout(() => null, 0);\r\n      if (!response.ok) {\r\n        throw new Error(response.statusText);\r\n      }\r\n      return response.json().then(data => data);\r\n    })\r\n    .catch(error => {\r\n      //console.log(error);\r\n      throw error;\r\n    });\r\n}\r\n","// import { ajax } from 'jquery';\r\n// import queryString from 'query-string';\r\n\r\nimport { CookieHelper } from './CookieHelper.class';\r\nimport { SecurityApi } from './SecurityApi.class';\r\n\r\nimport { initialUserState } from '../redux/reducers';\r\n// import { randomString } from '~/core/util/helpers';\r\n// import userManager from './oidc/userManager';\r\n\r\nconst LOGIN_COOKIE = 'ContensisCMSUserName';\r\nconst LAST_USERNAME_COOKIE = 'ContensisLastUserName';\r\nconst DISPLAY_NAME_COOKIE = 'ContensisDisplayName';\r\nconst USER_LANGUAGE_COOKIE = 'User_LanguageID';\r\nconst AVATAR_COOKIE = 'ContensisAvatar';\r\n\r\n// const contensis = CONTENSIS; /* global CONTENSIS */\r\n\r\nexport class LoginHelper {\r\n  static GetLoginCookie() {\r\n    return CookieHelper.GetCookie(LOGIN_COOKIE);\r\n  }\r\n\r\n  static SetLoginCookies(user) {\r\n    if (user.securityToken)\r\n      CookieHelper.SetCookie(LOGIN_COOKIE, user.securityToken);\r\n    if (user.username) {\r\n      CookieHelper.SetCookie(LAST_USERNAME_COOKIE, user.username);\r\n      CookieHelper.SetCookie(DISPLAY_NAME_COOKIE, user.username);\r\n    }\r\n  }\r\n\r\n  static GetCachedCredentials() {\r\n    return {\r\n      securityToken: CookieHelper.GetCookie(LOGIN_COOKIE),\r\n      username: CookieHelper.GetCookie(LAST_USERNAME_COOKIE),\r\n      displayName: CookieHelper.GetCookie(DISPLAY_NAME_COOKIE),\r\n      languageId: CookieHelper.GetCookie(USER_LANGUAGE_COOKIE),\r\n      avatar: CookieHelper.GetCookie(AVATAR_COOKIE),\r\n    };\r\n  }\r\n\r\n  static GetCachedCredentialsSSR(cookies) {\r\n    return {\r\n      securityToken: cookies[LOGIN_COOKIE],\r\n      username: cookies[LAST_USERNAME_COOKIE],\r\n      displayName: cookies[DISPLAY_NAME_COOKIE],\r\n      languageId: cookies[USER_LANGUAGE_COOKIE],\r\n      avatar: cookies[AVATAR_COOKIE],\r\n    };\r\n  }\r\n\r\n  static ClearCachedCredentials() {\r\n    CookieHelper.DeleteCookie(LOGIN_COOKIE);\r\n    CookieHelper.DeleteCookie(LAST_USERNAME_COOKIE);\r\n    CookieHelper.DeleteCookie(DISPLAY_NAME_COOKIE);\r\n    CookieHelper.DeleteCookie(USER_LANGUAGE_COOKIE);\r\n    CookieHelper.DeleteCookie(AVATAR_COOKIE);\r\n  }\r\n\r\n  static async ValidateUser(groups = false, cookies = null) {\r\n    const cached = cookies\r\n      ? this.GetCachedCredentialsSSR(cookies)\r\n      : this.GetCachedCredentials();\r\n\r\n    if (cached.securityToken) {\r\n      const response = await SecurityApi.ValidateUser(cached.securityToken);\r\n\r\n      if (!response) return false;\r\n\r\n      // Convert result to a User object\r\n      const user = {\r\n        username: cached.username,\r\n        securityToken: encodeURIComponent(response.SecurityToken),\r\n        logonResult: response.LogonResult,\r\n        id: response.UserID,\r\n        loginScreenMode: 'login',\r\n      };\r\n\r\n      if (user.logonResult !== 0) {\r\n        // Clear the cookie cache so we don't need to validate again\r\n        LoginHelper.ClearCachedCredentials();\r\n      } else {\r\n        // Set logged in flag\r\n        user.loggedIn = true;\r\n\r\n        if (groups) {\r\n          const userWithGroups = await this.GetGroups(user);\r\n          return userWithGroups;\r\n        }\r\n      }\r\n\r\n      return user;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static async LoginUser(username, password, groups = false) {\r\n    if (username && password) {\r\n      // Call LogonUser API\r\n      const loginResponse = await SecurityApi.LogonUser(username, password);\r\n      if (loginResponse) {\r\n        // Extract the elements we need from the response\r\n        const { SecurityToken, LogonResult, UserID } = loginResponse;\r\n        const failedLogin = !!LogonResult; // 0 is successful\r\n\r\n        // Map response to new user object\r\n        const user = {\r\n          username,\r\n          failedLogin,\r\n          loggedIn: !!SecurityToken && !failedLogin,\r\n          securityToken: SecurityToken,\r\n          id: UserID,\r\n          logonResult: this.CheckResult(LogonResult),\r\n        };\r\n\r\n        if (!user.failedLogin && !!user.securityToken) {\r\n          this.SetLoginCookies(user);\r\n\r\n          if (groups) {\r\n            const userWithGroups = await this.GetGroups(user);\r\n            return userWithGroups;\r\n          }\r\n        }\r\n\r\n        return user;\r\n      } else {\r\n        // Create user object to show login failed due to service fault\r\n        return {\r\n          securityToken: null,\r\n          loggedIn: false,\r\n          failedLogin: true,\r\n          logonResult: 'Service Fault',\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  static async GetGroups(user) {\r\n    if (!user.securityToken) {\r\n      return user;\r\n    }\r\n\r\n    const userInfoResponse = await SecurityApi.GetUserInfo(user.securityToken);\r\n    if (userInfoResponse) {\r\n      const response = JSON.parse(userInfoResponse);\r\n\r\n      if (response.Error || !response.GroupCollection) {\r\n        user.errorMessage = `Problem fetching user info: ${response.Error}`;\r\n      } else {\r\n        user.groups = response.GroupCollection.map(group => ({\r\n          name: group.GroupName,\r\n          id: group.GroupId,\r\n        }));\r\n        user.fullName = response.Fullname;\r\n        user.emailAddress = response.Email;\r\n      }\r\n    }\r\n    return user;\r\n  }\r\n\r\n  static LogoutUser() {\r\n    this.ClearCachedCredentials();\r\n    return initialUserState.toJS();\r\n  }\r\n\r\n  static ClientRedirectToLogin(uri) {\r\n    if (typeof window != 'undefined') {\r\n      window.location.href = LoginHelper.LoginPageUrl(uri); // LoginHelper.IsWsFedSignin()\r\n      // ? LoginHelper.WsFedLoginPageUrl(window.location)\r\n      // : LoginHelper.LoginPageUrl(uri);\r\n    }\r\n  }\r\n\r\n  static LoginPageUrl(uri) {\r\n    return `${uri || '/login'}?redirect_uri=${window.location.pathname +\r\n      window.location.search}`;\r\n  }\r\n  // static WsFedLoginPageUrl(currentLocation) {\r\n  //   const loginPage = contensis.ADFS_LOGIN_PAGE.replace(\r\n  //     '{redirect_uri}',\r\n  //     encodeURIComponent(currentLocation.toString().split('#')[0])\r\n  //   ).replace('{nonce}', randomString(5));\r\n  //   return `${contensis.URL}${loginPage}`.replace(/([^:]\\/)\\/+/g, '$1');\r\n  // }\r\n\r\n  // static IsWsFedSignin() {\r\n  //   return contensis.WSFED_SIGNIN;\r\n  // }\r\n\r\n  // static WsFedSignin(redirectUri) {\r\n  //   userManager.signinRedirect({\r\n  //     scope: 'openid',\r\n  //     response_type: 'id_token',\r\n  //     redirect_uri: redirectUri || window.location.toString(),\r\n  //   });\r\n  // }\r\n\r\n  // static WsFedLogout() {\r\n  //   ajax(`${contensis.URL}authenticate/logout/`, {\r\n  //     dataType: 'jsonp',\r\n  //     jsonp: false,\r\n  //     async: false,\r\n  //   });\r\n  // }\r\n\r\n  static async ForgotPassword(username) {\r\n    if (username) {\r\n      const currentUrl = window.location.protocol + '//' + window.location.host;\r\n      const passwordResponse = await SecurityApi.ForgotPassword(\r\n        username,\r\n        currentUrl\r\n      );\r\n      if (passwordResponse) {\r\n        // Extract the elements we need from the response\r\n        return passwordResponse;\r\n      }\r\n    }\r\n  }\r\n\r\n  static async ChangePassword(\r\n    username,\r\n    oldPassword,\r\n    newPassword,\r\n    newPasswordConfirm\r\n  ) {\r\n    if (newPassword && newPasswordConfirm) {\r\n      if (this.ValidatePassword(newPassword)) {\r\n        const passwordResponse = await SecurityApi.ChangePassword(\r\n          username,\r\n          oldPassword,\r\n          newPassword,\r\n          newPasswordConfirm\r\n        );\r\n        //const passwordResponse = await SecurityApi.ChangePassword(btoa(username), btoa(oldPassword), btoa(newPassword), btoa(newPasswordConfirm));\r\n        if (passwordResponse) {\r\n          // Extract the elements we need from the response\r\n          return passwordResponse;\r\n        }\r\n      } else {\r\n        return 'New password does not meet the requirements: \\r\\n\\r\\n - Must be a minimum of 8 characters long \\r\\n - Must contain at least 1 uppercase character \\r\\n - Must contain at least 1 special character or number';\r\n      }\r\n    }\r\n  }\r\n\r\n  static async ChangePasswordWithToken(token, newPassword, newPasswordConfirm) {\r\n    if (newPassword && newPasswordConfirm) {\r\n      if (this.ValidatePassword(newPassword)) {\r\n        const passwordResponse = await SecurityApi.ChangePasswordWithToken(\r\n          token,\r\n          btoa(newPassword),\r\n          btoa(newPasswordConfirm)\r\n        );\r\n        //const passwordResponse = await SecurityApi.ChangePassword(btoa(username), btoa(oldPassword), btoa(newPassword), btoa(newPasswordConfirm));\r\n        if (passwordResponse) {\r\n          // Extract the elements we need from the response\r\n          return passwordResponse;\r\n        }\r\n      } else {\r\n        return 'New password does not meet the requirements: \\r\\n\\r\\n - Must be a minimum of 8 characters long \\r\\n - Must contain at least 1 uppercase character \\r\\n - Must contain at least 1 special character or number';\r\n      }\r\n    }\r\n  }\r\n\r\n  static ValidatePassword(pword) {\r\n    //Password must be over 8 characters long\r\n    if (pword.length < 8) return false;\r\n    //This only returns true if the following criteria is met:\r\n    //  *8 chars or more\r\n    //  *Must contain at least 1 capital letter\r\n    //  *Must contain at least 1 number or special character\r\n    return /^(?:(?=.*[a-z])(?:(?=.*[A-Z])(?=.*[\\d\\W])|(?=.*\\W)(?=.*\\d))|(?=.*\\W)(?=.*[A-Z])(?=.*\\d)).{8,}$/.test(\r\n      pword\r\n    );\r\n  }\r\n\r\n  static CheckResult(result) {\r\n    const Results = {\r\n      '0': 'OK',\r\n      '-2': 'Incorrect username or password',\r\n      '-3': 'Account disabled',\r\n      '-4': 'Account locked',\r\n      '-5': 'Log on from this PC is denied',\r\n      '-6': 'Log on at this time is denied',\r\n      '-7': 'Account already logged in',\r\n      '-9': 'Unspecified error',\r\n      '2': 'Password change required',\r\n      '3': 'Insufficient privileges',\r\n      '-10': 'Account expired',\r\n      '-11': 'Maintenance mode',\r\n      '4': 'Security token expired',\r\n      '': 'An error has occured',\r\n    };\r\n    return Results[result];\r\n  }\r\n}\r\n","import { takeEvery, select, put, fork, call } from 'redux-saga/effects';\r\nimport queryString from 'query-string';\r\nimport {\r\n  LOGIN_USER,\r\n  LOGIN_SUCCESSFUL,\r\n  LOGIN_FAILED,\r\n  LOGOUT_USER,\r\n  CREATE_USER_ACCOUNT,\r\n  VALIDATE_USER,\r\n  VALIDATE_USER_SUCCESS,\r\n  VALIDATE_USER_FAILED,\r\n  UPDATE_USER,\r\n  FORGOT_USER_PASSWORD,\r\n  CHANGE_USER_PASSWORD,\r\n} from './types';\r\nimport { initialUserState } from './reducers';\r\nimport { SET_ROUTE } from '~/core/redux/types/routing';\r\nimport { selectCurrentSearch } from '~/core/redux/selectors/routing';\r\nimport { selectUser, selectUsername } from './selectors';\r\nimport { LoginHelper } from '../util/LoginHelper.class';\r\nimport { SecurityApi } from '../util/SecurityApi.class';\r\n\r\nexport const userSagas = [\r\n  takeEvery(LOGIN_USER, loginUserSaga),\r\n  takeEvery(LOGOUT_USER, logoutUserSaga),\r\n\r\n  takeEvery(VALIDATE_USER, validateUserSaga),\r\n\r\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccountSaga),\r\n  takeEvery(FORGOT_USER_PASSWORD, forgotPassword),\r\n  takeEvery(CHANGE_USER_PASSWORD, changePassword),\r\n];\r\n\r\nfunction* loginUserSaga(action) {\r\n  const getGroups = true;\r\n\r\n  const { username, password } = action;\r\n  if (username && password) {\r\n    const user = yield LoginHelper.LoginUser(username, password, getGroups);\r\n\r\n    yield call(updateUserSaga, {\r\n      type: user.failedLogin ? LOGIN_FAILED : LOGIN_SUCCESSFUL,\r\n      user,\r\n      redirect: !user.failedLogin,\r\n    });\r\n  } else {\r\n    yield LoginHelper.ClientRedirectToLogin();\r\n  }\r\n}\r\n\r\nfunction* logoutUserSaga() {\r\n  const user = LoginHelper.LogoutUser();\r\n  yield fork(updateUserSaga, { user });\r\n  const state = yield select();\r\n\r\n  yield LoginHelper.ClientRedirectToHome(state.getIn(['router', 'location']));\r\n}\r\n\r\nexport function* validateUserSaga(action) {\r\n  const getGroups = true;\r\n\r\n  const state = yield select();\r\n  const currentQs = queryString.parse(\r\n    state.getIn(['router', 'location', 'search'])\r\n  );\r\n\r\n  const qsToken = currentQs.securityToken || currentQs.securitytoken;\r\n\r\n  if (qsToken) {\r\n    LoginHelper.SetLoginCookies({ securityToken: qsToken });\r\n  }\r\n\r\n  const cookies = !qsToken\r\n    ? action.cookies\r\n    : {\r\n        ContensisCMSUserName: encodeURIComponent(qsToken),\r\n        ...action.cookies,\r\n      };\r\n  const user = yield LoginHelper.ValidateUser(getGroups, cookies);\r\n\r\n  const type =\r\n    user && user.loggedIn ? VALIDATE_USER_SUCCESS : VALIDATE_USER_FAILED;\r\n\r\n  yield call(updateUserSaga, {\r\n    type,\r\n    user: user && !user.loggedIn ? initialUserState : user,\r\n  });\r\n}\r\n\r\nfunction* updateUserSaga(action) {\r\n  const userState = yield select(selectUser);\r\n  yield put({\r\n    type: UPDATE_USER,\r\n    from: action.type,\r\n    user: { ...userState.toJS(), ...action.user },\r\n  });\r\n  if (action.redirect) {\r\n    const currentSearch = yield select(selectCurrentSearch);\r\n    const qs = queryString.parse(currentSearch);\r\n    const redirectUri = qs.redirect_uri;\r\n    if (redirectUri) {\r\n      yield put({ type: SET_ROUTE, path: redirectUri });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* forgotPassword(action) {\r\n  const message = yield LoginHelper.ForgotPassword(action.username);\r\n  yield put({\r\n    type: UPDATE_USER,\r\n    user: {\r\n      passwordReset: true,\r\n      passwordResetMessage: message,\r\n    },\r\n    history,\r\n  });\r\n}\r\n\r\nfunction* changePassword(action) {\r\n  const state = yield select();\r\n  const username = selectUsername(state);\r\n  let message = '';\r\n  if (action.token) {\r\n    message = yield LoginHelper.ChangePasswordWithToken(\r\n      action.token,\r\n      action.newPassword,\r\n      action.newPasswordConfirm\r\n    );\r\n  } else {\r\n    message = yield LoginHelper.ChangePassword(\r\n      username,\r\n      action.oldPassword,\r\n      action.newPassword,\r\n      action.newPasswordConfirm\r\n    );\r\n  }\r\n  yield put({\r\n    type: UPDATE_USER,\r\n    user: {\r\n      logonResult: message,\r\n    },\r\n    history,\r\n  });\r\n}\r\n\r\nfunction* createUserAccountSaga() {\r\n  const userState = yield select(selectUser);\r\n  if (userState.username && userState.password) {\r\n    // Call RegisterUser API\r\n    const registerResponse = yield SecurityApi.RegisterUser(\r\n      userState.username,\r\n      userState.password\r\n    );\r\n\r\n    if (registerResponse) {\r\n      const { securityToken, registrationResult, id } = registerResponse;\r\n\r\n      if (securityToken) {\r\n        const user = {\r\n          ...userState,\r\n          id,\r\n          securityToken,\r\n          password: null,\r\n          loggedIn: true,\r\n          verifiedEmail: false,\r\n          failedLogin: false,\r\n          failedToCreateAccount: false,\r\n          registrationResult,\r\n        };\r\n        yield put({ type: UPDATE_USER, user });\r\n      } else {\r\n        const user = {\r\n          ...userState,\r\n          securityToken: null,\r\n          loggedIn: false,\r\n          verifiedEmail: false,\r\n          failedLogin: true,\r\n          failedToCreateAccount: true,\r\n          registrationResult,\r\n        };\r\n        yield put({ type: UPDATE_USER, user });\r\n      }\r\n    } else {\r\n      yield put({\r\n        type: UPDATE_USER,\r\n        user: { ...userState, registrationResult: 'ServiceFault' },\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"names":["ACTION_PREFIX","UPDATE_USER","LOGIN_USER","LOGIN_SUCCESSFUL","LOGIN_FAILED","LOGOUT_USER","TOGGLE_LOGIN_MODE","CREATE_USER_ACCOUNT","VALIDATE_USER","VALIDATE_USER_SUCCESS","VALIDATE_USER_FAILED","FORGOT_USER_PASSWORD","FORGOT_USER_PASSWORD_COMPLETE","CHANGE_USER_PASSWORD","CHANGE_USER_PASSWORD_FAILED","CHANGE_USER_PASSWORD_COMPLETE","SET_RECAPTCHA_KEY","SET_RECAPTCHA_RESPONSE","initialUserState","Map","loggedIn","failedLogin","username","id","securityToken","logonResult","groups","List","emailAddress","fullName","loginScreenMode","passwordReset","passwordResetMessage","changePasswordMessage","recaptcha","key","response","isHuman","token","state","action","type","user","set","get","fromJS","newMode","loginMode","setIn","COOKIE_VALID_DAYS","_cookie","Cookies","withConverter","read","value","decodeURIComponent","write","encodeURIComponent","CookieHelper","GetCookie","name","SetCookie","maxAgeDays","expires","DeleteCookie","remove","CMS_URL","SERVERS","cms","config","REGISTER_USER_URI","LOGON_USER_URI","VALIDATE_USER_URI","USER_INFO_URI","FORGOT_PASSWORD_URI","CHANGE_PASSWORD_URI","CHANGE_PASSWORD_TOKEN_URI","AUTH_CAPTCHA_URI","LOGIN_URL","REGISTER_USER_URL","LOGON_USER_URL","VALIDATE_USER_URL","USER_INFO_URL","BASE_OPTIONS","method","headers","SecurityApi","AuthoriseRecaptcha","url","options","LogonUser","password","body","ip","applicationName","JSON","stringify","ValidateUser","bodyToken","GetUserInfo","ContensisCMSUserName","RegisterUser","email","ChangePassword","oldPassword","newPassword","newPasswordConfirm","ChangePasswordWithToken","ForgotPassword","currentUrl","responseBody","api","error","fetch","then","setTimeout","ok","Error","statusText","json","data","catch","LOGIN_COOKIE","LAST_USERNAME_COOKIE","DISPLAY_NAME_COOKIE","USER_LANGUAGE_COOKIE","AVATAR_COOKIE","LoginHelper","GetLoginCookie","SetLoginCookies","GetCachedCredentials","displayName","languageId","avatar","GetCachedCredentialsSSR","cookies","ClearCachedCredentials","cached","SecurityToken","LogonResult","UserID","userWithGroups","GetGroups","LoginUser","loginResponse","CheckResult","userInfoResponse","parse","GroupCollection","errorMessage","map","group","GroupName","GroupId","Fullname","Email","LogoutUser","toJS","ClientRedirectToLogin","uri","window","location","href","LoginPageUrl","pathname","search","protocol","host","passwordResponse","ValidatePassword","btoa","pword","length","test","result","Results","userSagas","takeEvery","loginUserSaga","logoutUserSaga","validateUserSaga","createUserAccountSaga","forgotPassword","changePassword","getGroups","call","updateUserSaga","redirect","fork","select","ClientRedirectToHome","getIn","currentQs","queryString","qsToken","securitytoken","userState","selectUser","put","from","currentSearch","selectCurrentSearch","qs","redirectUri","redirect_uri","SET_ROUTE","path","message","history","selectUsername","registerResponse","registrationResult","verifiedEmail","failedToCreateAccount"],"mappings":"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"}